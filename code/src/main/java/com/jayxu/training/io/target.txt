JAVA.LANG.REFLECT
CLASS PROXY

JAVA.LANG.OBJECT
  EXTENDED BY JAVA.LANG.REFLECT.PROXY

ALL IMPLEMENTED INTERFACES:
    SERIALIZABLE

PUBLIC CLASS PROXY
EXTENDS OBJECT
IMPLEMENTS SERIALIZABLE

PROXY PROVIDES STATIC METHODS FOR CREATING DYNAMIC PROXY CLASSES AND INSTANCES, AND IT IS ALSO THE SUPERCLASS OF ALL DYNAMIC PROXY CLASSES CREATED BY THOSE METHODS.

TO CREATE A PROXY FOR SOME INTERFACE FOO:

     INVOCATIONHANDLER HANDLER = NEW MYINVOCATIONHANDLER(...);
     CLASS PROXYCLASS = PROXY.GETPROXYCLASS(
         FOO.CLASS.GETCLASSLOADER(), NEW CLASS[] { FOO.CLASS });
     FOO F = (FOO) PROXYCLASS.
         GETCONSTRUCTOR(NEW CLASS[] { INVOCATIONHANDLER.CLASS }).
         NEWINSTANCE(NEW OBJECT[] { HANDLER });
 

OR MORE SIMPLY:

     FOO F = (FOO) PROXY.NEWPROXYINSTANCE(FOO.CLASS.GETCLASSLOADER(),
                                          NEW CLASS[] { FOO.CLASS },
                                          HANDLER);
 

A DYNAMIC PROXY CLASS (SIMPLY REFERRED TO AS A PROXY CLASS BELOW) IS A CLASS THAT IMPLEMENTS A LIST OF INTERFACES SPECIFIED AT RUNTIME WHEN THE CLASS IS CREATED, WITH BEHAVIOR AS DESCRIBED BELOW. A PROXY INTERFACE IS SUCH AN INTERFACE THAT IS IMPLEMENTED BY A PROXY CLASS. A PROXY INSTANCE IS AN INSTANCE OF A PROXY CLASS. EACH PROXY INSTANCE HAS AN ASSOCIATED INVOCATION HANDLER OBJECT, WHICH IMPLEMENTS THE INTERFACE INVOCATIONHANDLER. A METHOD INVOCATION ON A PROXY INSTANCE THROUGH ONE OF ITS PROXY INTERFACES WILL BE DISPATCHED TO THE INVOKE METHOD OF THE INSTANCE'S INVOCATION HANDLER, PASSING THE PROXY INSTANCE, A JAVA.LANG.REFLECT.METHOD OBJECT IDENTIFYING THE METHOD THAT WAS INVOKED, AND AN ARRAY OF TYPE OBJECT CONTAINING THE ARGUMENTS. THE INVOCATION HANDLER PROCESSES THE ENCODED METHOD INVOCATION AS APPROPRIATE AND THE RESULT THAT IT RETURNS WILL BE RETURNED AS THE RESULT OF THE METHOD INVOCATION ON THE PROXY INSTANCE.

A PROXY CLASS HAS THE FOLLOWING PROPERTIES:

    * PROXY CLASSES ARE PUBLIC, FINAL, AND NOT ABSTRACT.
    * THE UNQUALIFIED NAME OF A PROXY CLASS IS UNSPECIFIED. THE SPACE OF CLASS NAMES THAT BEGIN WITH THE STRING "$PROXY" SHOULD BE, HOWEVER, RESERVED FOR PROXY CLASSES.
    * A PROXY CLASS EXTENDS JAVA.LANG.REFLECT.PROXY.
    * A PROXY CLASS IMPLEMENTS EXACTLY THE INTERFACES SPECIFIED AT ITS CREATION, IN THE SAME ORDER.
    * IF A PROXY CLASS IMPLEMENTS A NON-PUBLIC INTERFACE, THEN IT WILL BE DEFINED IN THE SAME PACKAGE AS THAT INTERFACE. OTHERWISE, THE PACKAGE OF A PROXY CLASS IS ALSO UNSPECIFIED. NOTE THAT PACKAGE SEALING WILL NOT PREVENT A PROXY CLASS FROM BEING SUCCESSFULLY DEFINED IN A PARTICULAR PACKAGE AT RUNTIME, AND NEITHER WILL CLASSES ALREADY DEFINED BY THE SAME CLASS LOADER AND THE SAME PACKAGE WITH PARTICULAR SIGNERS.
    * SINCE A PROXY CLASS IMPLEMENTS ALL OF THE INTERFACES SPECIFIED AT ITS CREATION, INVOKING GETINTERFACES ON ITS CLASS OBJECT WILL RETURN AN ARRAY CONTAINING THE SAME LIST OF INTERFACES (IN THE ORDER SPECIFIED AT ITS CREATION), INVOKING GETMETHODS ON ITS CLASS OBJECT WILL RETURN AN ARRAY OF METHOD OBJECTS THAT INCLUDE ALL OF THE METHODS IN THOSE INTERFACES, AND INVOKING GETMETHOD WILL FIND METHODS IN THE PROXY INTERFACES AS WOULD BE EXPECTED.
    * THE PROXY.ISPROXYCLASS METHOD WILL RETURN TRUE IF IT IS PASSED A PROXY CLASS-- A CLASS RETURNED BY PROXY.GETPROXYCLASS OR THE CLASS OF AN OBJECT RETURNED BY PROXY.NEWPROXYINSTANCE-- AND FALSE OTHERWISE.
    * THE JAVA.SECURITY.PROTECTIONDOMAIN OF A PROXY CLASS IS THE SAME AS THAT OF SYSTEM CLASSES LOADED BY THE BOOTSTRAP CLASS LOADER, SUCH AS JAVA.LANG.OBJECT, BECAUSE THE CODE FOR A PROXY CLASS IS GENERATED BY TRUSTED SYSTEM CODE. THIS PROTECTION DOMAIN WILL TYPICALLY BE GRANTED JAVA.SECURITY.ALLPERMISSION.
    * EACH PROXY CLASS HAS ONE PUBLIC CONSTRUCTOR THAT TAKES ONE ARGUMENT, AN IMPLEMENTATION OF THE INTERFACE INVOCATIONHANDLER, TO SET THE INVOCATION HANDLER FOR A PROXY INSTANCE. RATHER THAN HAVING TO USE THE REFLECTION API TO ACCESS THE PUBLIC CONSTRUCTOR, A PROXY INSTANCE CAN BE ALSO BE CREATED BY CALLING THE PROXY.NEWINSTANCE METHOD, WHICH COMBINES THE ACTIONS OF CALLING PROXY.GETPROXYCLASS WITH INVOKING THE CONSTRUCTOR WITH AN INVOCATION HANDLER. 

A PROXY INSTANCE HAS THE FOLLOWING PROPERTIES:

    * GIVEN A PROXY INSTANCE PROXY AND ONE OF THE INTERFACES IMPLEMENTED BY ITS PROXY CLASS FOO, THE FOLLOWING EXPRESSION WILL RETURN TRUE:

           PROXY INSTANCEOF FOO
       

      AND THE FOLLOWING CAST OPERATION WILL SUCCEED (RATHER THAN THROWING A CLASSCASTEXCEPTION):

           (FOO) PROXY
       

    * EACH PROXY INSTANCE HAS AN ASSOCIATED INVOCATION HANDLER, THE ONE THAT WAS PASSED TO ITS CONSTRUCTOR. THE STATIC PROXY.GETINVOCATIONHANDLER METHOD WILL RETURN THE INVOCATION HANDLER ASSOCIATED WITH THE PROXY INSTANCE PASSED AS ITS ARGUMENT.
    * AN INTERFACE METHOD INVOCATION ON A PROXY INSTANCE WILL BE ENCODED AND DISPATCHED TO THE INVOCATION HANDLER'S INVOKE METHOD AS DESCRIBED IN THE DOCUMENTATION FOR THAT METHOD.
    * AN INVOCATION OF THE HASHCODE, EQUALS, OR TOSTRING METHODS DECLARED IN JAVA.LANG.OBJECT ON A PROXY INSTANCE WILL BE ENCODED AND DISPATCHED TO THE INVOCATION HANDLER'S INVOKE METHOD IN THE SAME MANNER AS INTERFACE METHOD INVOCATIONS ARE ENCODED AND DISPATCHED, AS DESCRIBED ABOVE. THE DECLARING CLASS OF THE METHOD OBJECT PASSED TO INVOKE WILL BE JAVA.LANG.OBJECT. OTHER PUBLIC METHODS OF A PROXY INSTANCE INHERITED FROM JAVA.LANG.OBJECT ARE NOT OVERRIDDEN BY A PROXY CLASS, SO INVOCATIONS OF THOSE METHODS BEHAVE LIKE THEY DO FOR INSTANCES OF JAVA.LANG.OBJECT. 

METHODS DUPLICATED IN MULTIPLE PROXY INTERFACES

WHEN TWO OR MORE INTERFACES OF A PROXY CLASS CONTAIN A METHOD WITH THE SAME NAME AND PARAMETER SIGNATURE, THE ORDER OF THE PROXY CLASS'S INTERFACES BECOMES SIGNIFICANT. WHEN SUCH A DUPLICATE METHOD IS INVOKED ON A PROXY INSTANCE, THE METHOD OBJECT PASSED TO THE INVOCATION HANDLER WILL NOT NECESSARILY BE THE ONE WHOSE DECLARING CLASS IS ASSIGNABLE FROM THE REFERENCE TYPE OF THE INTERFACE THAT THE PROXY'S METHOD WAS INVOKED THROUGH. THIS LIMITATION EXISTS BECAUSE THE CORRESPONDING METHOD IMPLEMENTATION IN THE GENERATED PROXY CLASS CANNOT DETERMINE WHICH INTERFACE IT WAS INVOKED THROUGH. THEREFORE, WHEN A DUPLICATE METHOD IS INVOKED ON A PROXY INSTANCE, THE METHOD OBJECT FOR THE METHOD IN THE FOREMOST INTERFACE THAT CONTAINS THE METHOD (EITHER DIRECTLY OR INHERITED THROUGH A SUPERINTERFACE) IN THE PROXY CLASS'S LIST OF INTERFACES IS PASSED TO THE INVOCATION HANDLER'S INVOKE METHOD, REGARDLESS OF THE REFERENCE TYPE THROUGH WHICH THE METHOD INVOCATION OCCURRED.

IF A PROXY INTERFACE CONTAINS A METHOD WITH THE SAME NAME AND PARAMETER SIGNATURE AS THE HASHCODE, EQUALS, OR TOSTRING METHODS OF JAVA.LANG.OBJECT, WHEN SUCH A METHOD IS INVOKED ON A PROXY INSTANCE, THE METHOD OBJECT PASSED TO THE INVOCATION HANDLER WILL HAVE JAVA.LANG.OBJECT AS ITS DECLARING CLASS. IN OTHER WORDS, THE PUBLIC, NON-FINAL METHODS OF JAVA.LANG.OBJECT LOGICALLY PRECEDE ALL OF THE PROXY INTERFACES FOR THE DETERMINATION OF WHICH METHOD OBJECT TO PASS TO THE INVOCATION HANDLER.

NOTE ALSO THAT WHEN A DUPLICATE METHOD IS DISPATCHED TO AN INVOCATION HANDLER, THE INVOKE METHOD MAY ONLY THROW CHECKED EXCEPTION TYPES THAT ARE ASSIGNABLE TO ONE OF THE EXCEPTION TYPES IN THE THROWS CLAUSE OF THE METHOD IN ALL OF THE PROXY INTERFACES THAT IT CAN BE INVOKED THROUGH. IF THE INVOKE METHOD THROWS A CHECKED EXCEPTION THAT IS NOT ASSIGNABLE TO ANY OF THE EXCEPTION TYPES DECLARED BY THE METHOD IN ONE OF THE PROXY INTERFACES THAT IT CAN BE INVOKED THROUGH, THEN AN UNCHECKED UNDECLAREDTHROWABLEEXCEPTION WILL BE THROWN BY THE INVOCATION ON THE PROXY INSTANCE. THIS RESTRICTION MEANS THAT NOT ALL OF THE EXCEPTION TYPES RETURNED BY INVOKING GETEXCEPTIONTYPES ON THE METHOD OBJECT PASSED TO THE INVOKE METHOD CAN NECESSARILY BE THROWN SUCCESSFULLY BY THE INVOKE METHOD.

SINCE:
    1.3
SEE ALSO:
    INVOCATIONHANDLER, SERIALIZED FORM
